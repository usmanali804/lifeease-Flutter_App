// Mocks generated by Mockito 5.4.5 from annotations
// in life_ease/test/helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:life_ease/core/auth/auth_service.dart' as _i5;
import 'package:life_ease/features/chat/domain/chat_service.dart' as _i8;
import 'package:life_ease/features/chat/domain/models/chat_message.dart' as _i3;
import 'package:life_ease/features/task/domain/models/task.dart' as _i2;
import 'package:life_ease/features/task/domain/task_service.dart' as _i7;
import 'package:life_ease/features/wellness/water_tracker/domain/water_tracking_service.dart'
    as _i9;
import 'package:life_ease/features/wellness/water_tracker/models/water_entry_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTask_0 extends _i1.SmartFake implements _i2.Task {
  _FakeTask_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatMessage_1 extends _i1.SmartFake implements _i3.ChatMessage {
  _FakeChatMessage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaterEntry_2 extends _i1.SmartFake implements _i4.WaterEntry {
  _FakeWaterEntry_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<void> setToken(
    String? token,
    String? refreshToken,
    DateTime? expiry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [
            token,
            refreshToken,
            expiry,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> isAuthenticated() => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i7.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Task>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i6.Future<List<_i2.Task>>);

  @override
  _i6.Future<_i2.Task> createTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i6.Future<_i2.Task>.value(_FakeTask_0(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i2.Task>);

  @override
  _i6.Future<_i2.Task> updateTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<_i2.Task>.value(_FakeTask_0(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i2.Task>);

  @override
  _i6.Future<bool> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i2.Task?> getTaskById(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [taskId],
        ),
        returnValue: _i6.Future<_i2.Task?>.value(),
      ) as _i6.Future<_i2.Task?>);
}

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i8.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.ChatMessage>> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue:
            _i6.Future<List<_i3.ChatMessage>>.value(<_i3.ChatMessage>[]),
      ) as _i6.Future<List<_i3.ChatMessage>>);

  @override
  _i6.Future<_i3.ChatMessage> sendMessage(_i3.ChatMessage? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i6.Future<_i3.ChatMessage>.value(_FakeChatMessage_1(
          this,
          Invocation.method(
            #sendMessage,
            [message],
          ),
        )),
      ) as _i6.Future<_i3.ChatMessage>);

  @override
  _i6.Future<void> deleteMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [messageId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<_i3.ChatMessage> onNewMessage() => (super.noSuchMethod(
        Invocation.method(
          #onNewMessage,
          [],
        ),
        returnValue: _i6.Stream<_i3.ChatMessage>.empty(),
      ) as _i6.Stream<_i3.ChatMessage>);

  @override
  _i6.Future<void> markAsRead(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [messageId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [WaterTrackingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaterTrackingService extends _i1.Mock
    implements _i9.WaterTrackingService {
  MockWaterTrackingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i4.WaterEntry>> getWaterEntries() => (super.noSuchMethod(
        Invocation.method(
          #getWaterEntries,
          [],
        ),
        returnValue: _i6.Future<List<_i4.WaterEntry>>.value(<_i4.WaterEntry>[]),
      ) as _i6.Future<List<_i4.WaterEntry>>);

  @override
  _i6.Future<_i4.WaterEntry> addWaterEntry(_i4.WaterEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWaterEntry,
          [entry],
        ),
        returnValue: _i6.Future<_i4.WaterEntry>.value(_FakeWaterEntry_2(
          this,
          Invocation.method(
            #addWaterEntry,
            [entry],
          ),
        )),
      ) as _i6.Future<_i4.WaterEntry>);

  @override
  _i6.Future<bool> deleteWaterEntry(String? entryId) => (super.noSuchMethod(
        Invocation.method(
          #deleteWaterEntry,
          [entryId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.WaterEntry> updateWaterEntry(_i4.WaterEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWaterEntry,
          [entry],
        ),
        returnValue: _i6.Future<_i4.WaterEntry>.value(_FakeWaterEntry_2(
          this,
          Invocation.method(
            #updateWaterEntry,
            [entry],
          ),
        )),
      ) as _i6.Future<_i4.WaterEntry>);

  @override
  _i6.Future<double> getDailyTotal(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #getDailyTotal,
          [date],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);
}
